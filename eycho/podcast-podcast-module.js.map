{"version":3,"sources":["./src/app/podcast/podcast.component.ts","./src/app/podcast/podcast.component.html","./src/app/podcast/podcast.module.ts"],"names":[],"mappings":"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","file":"podcast-podcast-module.js","sourcesContent":["import { AudioPlayer } from './../shared/player/audio/audio.player'\nimport { switchMap } from 'rxjs/operators'\nimport { PodcastService } from './services/podcast.service'\nimport { Component, OnInit } from '@angular/core'\nimport { Podcast } from 'src/app/shared/Models/Podcast'\nimport { Location } from '@angular/common'\nimport { pluck, first } from 'rxjs/operators'\nimport { Episode } from 'src/app/shared/Models/Episode'\nimport { Observable, Subscription } from 'rxjs'\nimport { BehaviorSubject } from 'rxjs'\nconst colors = require('nice-color-palettes')\n\nimport { Store } from '@ngrx/store'\nimport { AppState } from '../store/app.state'\nimport * as PlayerSelectors from '../shared/player/store/player.selectors'\nimport * as PlayerActions from '../shared/player/store/player.actions'\n@Component({\n  selector: 'app-podcast',\n  templateUrl: './podcast.component.html',\n  styleUrls: ['./podcast.component.scss']\n})\nexport class PodcastComponent implements OnInit {\n  podcast$!: Observable<Podcast>\n  slug!: string\n  episodes: Episode[] = []\n  pageNo = 0\n  page = new BehaviorSubject<number>(this.pageNo)\n  // playingState$: Observable<boolean>\n  playing: boolean\n  subscriptions!: Subscription\n  episodeQueue: Episode[]\n  constructor (\n    private podcastService: PodcastService,\n    private location: Location,\n    private store: Store<{ player: AppState }>,\n    private player: AudioPlayer\n  ) {\n    // This data is passed on the router\n    // If the data isn't loaded, load from the server\n\n    // const state: any = this.location.getState()\n\n    // if (!!history.state.navigationId) {\n    // console.log(this.location.path())\n    const slug = this.location.path().substr(9)\n    this.slug = slug\n    this.getPodcastEpisodes(this.slug)\n\n    const query$ = this.podcastService.getPodcast(slug).valueChanges\n\n    this.podcast$ = query$.pipe(first(), pluck('data', 'getPodcast'))\n\n    // } else {\n\n    //   this.podcast = history.state\n    //   this.slug = this.podcast.slug\n    //   this.getPodcastEpisodes(this.slug)\n    // }\n  }\n\n  ngOnInit (): void {}\n\n  getPodcastEpisodes (slug: string) {\n    this.page\n      .asObservable()\n      .pipe(\n        switchMap((value: number) => {\n          return this.podcastService.getEpisodes(slug, value).valueChanges\n        })\n      )\n      .pipe(pluck('data', 'getPodcastEpisodes'))\n      .subscribe((episodes: any) => {\n        this.episodes = [...this.episodes, ...episodes]\n      })\n  }\n\n  getColors () {\n    return colors[66]\n  }\n  getNiceDate (date: Date) {\n    return new Date(date).toDateString()\n  }\n  getNiceDuration (duration: string) {\n    if (duration.split(':').length == 1) {\n      return new Date(+duration * 1000).toISOString().substr(11, 8)\n    }\n    return duration\n  }\n\n  play (episode: Episode) {\n    // check if the episode is already in the queue, otherwise, add to the top of the queue and play\n    // this.store.dispatch(PlayerActions.addToQueueStart({ episode: episode }))\n    if (!this.player.player) {\n      this.store.dispatch(\n        PlayerActions.addToBeginningOfQueueStart({ episode: episode })\n      )\n    } else if (this.player?.currentlyPlaying.episode.slug == episode.slug) {\n      this.store.dispatch(PlayerActions.playPause())\n    } else {\n      this.store.dispatch(\n        PlayerActions.addToBeginningOfQueueStart({ episode: episode })\n      )\n    }\n  }\n\n  amPlaying (episode: Episode) {\n    const epIndx = this.episodeQueue?.findIndex(\n      ep => episode.sourceUrl == ep.sourceUrl\n    )\n    if (!this.player.currentlyPlaying) {\n      return 'play_circle_filled'\n    }\n    // epIndx == 0 ? console.log(episode) : ''\n    return this.player.currentlyPlaying.episode.slug == episode.slug &&\n      this.player.player.playing()\n      ? 'pause_circle_filled'\n      : 'play_circle_filled'\n  }\n\n  loadMoreEpisodes () {\n    this.pageNo += 1\n    this.page.next(this.pageNo)\n  }\n  ngOnDestroy (): void {\n    //Called once, before the instance is destroyed.\n    //Add 'implements OnDestroy' to the class.\n    // this.subscriptions.unsubscribe()\n  }\n}\n","<div\n  class=\"page\"\n  infiniteScroll\n  [infiniteScrollDistance]=\"2\"\n  [infiniteScrollThrottle]=\"50\"\n  [infiniteScrollUpDistance]=\"1.5\"\n  [scrollWindow]=\"false\"\n  (scrolled)=\"loadMoreEpisodes()\"\n>\n  <div\n    style.background-color=\"#{{ (podcast$|async)?.palette[0] }}36\"\n    class=\"header\"\n  >\n    <mat-card\n      class=\"podcast__image\"\n      style.background-color=\"#{{ (podcast$|async)?.palette[4] }}66\"\n    >\n      <img id=\"podcast__image\" src=\"{{ (podcast$ |async)?.image }}\" alt=\"\" />\n    </mat-card>\n    <div class=\"podcast__data\">\n      <h2 style.color=\"#{{ (podcast$ | async)?.palette[4] }}\">\n        {{ (podcast$|async)?.title }}\n      </h2>\n      <h3 style.color=\"#{{ (podcast$ | async)?.palette[2] }}\">\n        {{ (podcast$|async)?.publisher }}\n      </h3>\n      <div class=\"container\">\n        <button\n          mat-icon-button\n          color=\"primary\"\n          aria-label=\"Example icon button with a home icon\"\n        >\n          <mat-icon style.color=\"#{{ (podcast$|async)?.palette[3] }}\"\n            >play_circle_filled</mat-icon\n          >\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"content\">\n    <div\n      class=\"single__episode\"\n      *ngFor=\"let episode of episodes, let i = index\"\n    >\n      <div class=\"play\">\n        <button\n          mat-icon-button\n          color=\"primary\"\n          aria-label=\"Example icon button with a home icon\"\n        >\n          <mat-icon\n            (click)=\"play(episode)\"\n            style.color=\"#{{(podcast$|async)?.palette[4]}}\"\n            >{{amPlaying(episode)}}</mat-icon\n          >\n        </button>\n      </div>\n      <div class=\"episode__details\">\n        <h3>{{episode.title}}</h3>\n        <p>{{episode.datePublished | date}} | {{ episode.duration | time}}</p>\n      </div>\n      <mat-divider\n        style.color=\"#{{(podcast$|async)?.palette[4]}}\"\n      ></mat-divider>\n    </div>\n  </div>\n</div>\n","import { TimePipe } from './../shared/pipes/time/time.pipe'\nimport { PodcastComponent } from './podcast.component'\nimport { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll'\nimport { Material } from 'src/libs'\nimport { SharedModule } from '../shared/shared.module'\nimport { RouterModule } from '@angular/router'\n\nconst routes = [\n  {\n    path: '',\n    component: PodcastComponent\n  }\n]\n\n@NgModule({\n  declarations: [PodcastComponent],\n  imports: [\n    CommonModule,\n    Material,\n    InfiniteScrollModule,\n    SharedModule,\n    RouterModule.forChild(routes)\n  ]\n})\nexport class PodcastModule {}\n"],"sourceRoot":"webpack:///"}